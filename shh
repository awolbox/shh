#!/bin/bash
#
# shh - The shell program helper
#
#   Copyright (C) 2018 awol <awol@member.fsf.org>
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

readonly VERSION=1.0
readonly rawman=${executive}.1.md
readonly color='\e[32m'
readonly reset='\e[0m'

# All non zero return values are currently at set to 1, and since many things are happening,
# retun values should probably have a wider scope.
# HEY, THIS NEEDS DONE ASSHOLE!!!
# Exit codes 
# EX_USAGE=1
# etc...
#

_version()
{
    echo -e "$(basename $0) - The shell program helper utility - version $VERSION" >&2
}

_usage_short()
{
    echo "\
    +Usage:
    +   $(basename $0) [-s|--silent][-h][--help][-v][--version][--licence][--warranty] [[init NAME]|del|lv|lf|merge]\
    "| cut -d "+" -f 2 >&2
}
_usage_long()
{
    _version
    echo
    _usage_short
    echo "
    |Options:
    |   -h, --help     show usage information
    |   -o, --options  show available options
    |   -s, --silent   supress stdout and stderr
    |   -v, --version  show version information
    |   --licence      show copyright information
    |   --warranty     show warranty information
    |Commands:
    |   init   setup a new working directory
    |   del    delete all working files in directory
    |   lf     list all functions in working dir
    |   lv     list all variables in working dir
    |   merge  "compile" all working files together
    |   
    |Manual: shh(1)\
    " | cut -d "|" -f 2 >&2
}

# Just in case, the licence information is also kept in a function.
# Deletion of the licensing information at the head of this file is okay,
# as it is only ABOUT this program. However, please leave this one alone, 
# as it is a part of this program, and is important information the user should be able to access.
_show_licence()
{
    echo "
    | Copyright (C) 2018 awol <awol@member.fsf.org>
    |
    | This program is free software: you can redistribute it and/or modify
    | it under the terms of the GNU General Public License as published by
    | the Free Software Foundation, either version 3 of the License, or
    | (at your option) any later version.
    |
    | This program is distributed in the hope that it will be useful,
    | but WITHOUT ANY WARRANTY; without even the implied warranty of
    | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    | GNU General Public License for more details.
    |
    | You should have received a copy of the GNU General Public License
    | along with this program.  If not, see <http://www.gnu.org/licenses/>.
    " | cut -d "|" -f 2 >&2
}

# Display warranty information (Also important).
_show_warranty()
{
    echo "
    |    THERE IS NO WARRANTY FOR THIS PROGRAM, TO THE EXTENT PERMITTED BY
    | APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
    | HOLDERS AND/OR OTHER PARTIES PROVIDE THIS PROGRAM "AS IS" WITHOUT WARRANTY
    | OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, 
    | THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    | PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THIS PROGRAM
    | IS WITH YOU.  SHOULD THIS PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
    | ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
    " | cut -d "|" -f 2 >&2
}
# Uix
_warning(){ [ $QUIET = 0 ] && echo -n -e "${color}[WARNING]${reset} -- ${*}"; }
_exit(){ [ $QUIET = 0 ] && echo -e "${color}[FATAL]${reset} -- ${*}" && exit $EX; }

# Remove all native files
_remove()
{
    _remove_all()
	{
        { while read -r line; do rm $(cut -d " " -f 2); done < ./'functions'; }
		[[ $? -eq 0 ]] && { rm 'vars' 'functions' ${executive}; } || ex=1; _exit "failed to remove working files"
	}
    
    if [[ $QUIET == 0 ]]; then
        # Confirmation required
		echo -n "CONFIRM [ y | n ]: "
		read conf

        case "$conf" in
            n|N|no|NO) ex=1; _exit "User aborted action" ;;
            y|Y|yes|YES) _remove_all ;;
            *) ex=1; _exit "user reponse not understood" ;;
        esac
    else
		_remove_all || ex=1; _exit "failed to remove working files"
	fi
}

# Setup a new working directory
_setup() 
{
        if [[ $QUIET = 1 ]]; then
            executive=prog
        elif [[ -z $1 ]]; then
            echo -n "${color}[NAME]:${reset} "; read executive
        else
            case "$1" in
                *) executive=$2 ;;
            esac
        fi
        
        # Check if a working setup exists
		if [[ -f functions && -f vars ]]; then
            if [[ QUIET = 0 ]]; then
                _warning "You already appear to to be in a working directory, overwrite?: "
                read over
                if [[ "$over" == 'n' || 'N' ]]; then
                    ex=1; _exit "user aborted action"
                elif [[ "$over" == "y" || "Y" ]]; then
                    _remove ; continue
                fi
            fi
        fi

		# Set native files, give an apropriate version number, and open $executive in an editor
        { touch functions vars ${executive}; } && { echo "readonly VERSION=1.0" > ./'vars'; }
        [[ $? -ne 0 ]] && { ex=1; _exit "data error"; }
        { echo -e "#!/bin/bash\nsource vars\nsource functions" > ./"${executive}" && chmod +x ./"${executive}"; }
        [[ $? -eq 0 ]] && ${EDITOR} ${executive}
}

# Show variable information
_list_vars()
{
	[[ ! -f ./'vars' ]] && { ex=1; _exit "no variables to list"; }
    echo -e "${color}VARIABLES:${reset}"
    while read -r line; do 
        case $line in
            ''|\#*) continue ;;
		esac
	    echo "$(echo -e ${color} $(echo $line | cut -d "=" -f 1 | cut -d " " -f 2 ) ${reset})$(echo $line | cut -d "=" -f 2 | sed 's/#.*//')"
	done < ./'vars'
}

# Show functions' "order of opertations"
_list_functions()
{
    [[ ! -f ./'functions' ]] && { ex=1; _exit "no functions to list"; }
    echo -e "${color}FUNCTIONS:${reset}" && \
        while read -r line; do 
            echo -e " ${color}(${n})${reset}\t$(echo $line | cut -d ' ' -f 2)";
			n=$(($n + 1))
		done < ./'functions' | sed '1 d' | sed '$ d'
}

# Create new function
_new_function()
{
    # index
    if [[ $1 == "-i" || "--index" && $2 ]]; then
        function_index=$2
    fi
    
    # Handle index
    case "${function_index}" in
        *) : ;;
    esac
}

# Native files merged
_vars()
{
		# Start if 'vars' exists
        { cat $executive | head -n 1 > .vars && cat vars >> .vars; } || ex=1, _exit "'.vars' not cooperating"
}

_functions()
{
		while read line
		do
				cat $(cut -d " " -f 2) > .funcs
		done < functions
		[ $? -ne 0 ] && ex=1; _exit "'.funcs' not cooperating"
}

# Special files handled
_special()
{
    local found
	for found in ${all_files[@]}
	do case "$found" in
        "$rawman") rm "$rawman" || ex=1; _exit "man page immovable" ;;
        _*) rm ./_* ;;
    esac done
}

# Finish him
_sweep()
{
    # Functions
    { cat .funcs >> .vars && rm .funcs functions; } || { ex=1; _exit "could not sweep functions"; }
		
    # Executive
    { sed -i '1,4 d' $executive && cat $executive >> .vars; } && { rm "${executive}"; } || { ex=1; _exit "unable to sweep executive"; }
    { mv .vars $executive && chmod +x $executive && rm vars; } || { ex=1; _exit "unable to sweep vars"; }
	
    [ $? -ne 0 ] && { ex=1; _exit "unable to '_sweep'"; }
    _special
}

# "Compile"
# Checks to see if "native" files still exsist, if so, "merges" all files together in a certain order, then cleans up the place.
_compile()
{
    all_files=( $(ls .) )
	for n_file in ${all_files[@]}
	do case "$n_file" in
        vars) _vars ;;
		functions) _functions ;;
	esac done
	[ $? -ne 0 ] && ex=1; _exit "Compilation failure" # 'exit-code-system' needed
    _sweep
}

# Options
QUIET=0

# Editor 
if [[ -n $EDITOR ]]; then
    EDITOR=$EDITOR
elif [[ -x /usr/bin/vim ]]; then
    EDITOR=vim
elif [[ -x /usr/bin/nano ]]; then
    EDITOR=nano
elif [[ -x /usr/bin/vi ]]; then
    EDITOR=vi
else
    ex=1; _exit "a standard text editor could not be found"
fi

if [ $# -eq 0 ]; then
		_usage
else
    case "$1" in
        init) shift; _setup "$@" ;;
		del) _remove; ;;
        la) _list_functions && _list_vars;;
        lf) _list_functions ;;
        lv) _list_vars ;;
        merge) _compile ;;
        -s|--silent) QUIET='1'; shift ;;
        -h) echo -n "$(basename $0): "; _usage_short ;;
        --help) _usage_long ;;
        -o|--options) _usage_options ;;
        -v) echo "$VERSION" ;;
        --licence) _show_licence ;;
        --warranty) _show_warranty ;;
        --version) _version ;;
        --) shift ;;
        *) ex=1; _exit "$(basename $0): Invalid command: $@" ;;

        # TESTING
        # nf) _new_function ;;
        # ef) _edit_function ;;
        # nv) _new_var ;;
        # ev) _edit_var ;;
        # -m,--man) _open_manpage ;;
            esac
fi
exit $?


