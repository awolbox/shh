#!/bin/bash
#
# shh - The shell program helper
#
#   Copyright (C) 2018 awol <awol@member.fsf.org>
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This program is still in development, as such
# any comment beginning with '?' represents possible implimentations, 
# any comment beginning with '!' represents implimentations which will take place, or are currently underway,
# (meaning they might be "broken" at the moment).

readonly VERSION=1.0
readonly color='\e[32m'
readonly reset='\e[0m'

declare -a PARENT CHILD
INIT=./'.parents'
PARENT=( 'curr' 'refs' '.index')
CHILD=('vars' 'functions')

# ! - All non zero return values are currently at set to 1, and since many things are happening,
# and the use of silent mode is an option, return values should offer more information.
# HEY, THIS NEEDS DONE ASSHOLE!!!
# Exit codes 
# EX_USAGE=1
# etc...

_version(){
    echo -e "$(basename $0) - The shell program helper utility - version $VERSION" >&2
}
_usage(){
    _version
    echo "
    |USAGE:
    |   ${PROGRAM} [OPTIONS]... [COMMAND]
    |
    |OPTIONS:
    |   -h, --help     show usage information
    |   -s, --silent   supress stdout and stderr
    |   -v, --version  show version information
    |   --clean        verifys clean working dir
    |   --licence      show copyright information
    |   --warranty     show warranty information
    |
    |COMMAND:
    |   init   setup a new working directory
    |   del    delete all working files in directory
    |   lf     list all functions in working dir
    |   lv     list all variables in working dir
    |   merge  "compile" all working files together
    |   
    |MANUAL: shh(1)\
    " | cut -d "|" -f 2 >&2
}

# Just in case, the licence information is also kept in a function.
# Deletion of the licensing information at the head of this file is okay,
# as it is only ABOUT this program (a comment). However, please leave this one alone, 
# as it is a part of this program, and is important information the user should be able to access.
# (unless you are to modify/re-distribute this program under a new copyleft, in which case,
#  a new name and information should be added).
_show_licence(){
    echo "
    | Copyright (C) 2018 awol <awol@member.fsf.org>
    |
    | This program is free software: you can redistribute it and/or modify
    | it under the terms of the GNU General Public License as published by
    | the Free Software Foundation, either version 3 of the License, or
    | (at your option) any later version.
    |
    | This program is distributed in the hope that it will be useful,
    | but WITHOUT ANY WARRANTY; without even the implied warranty of
    | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    | GNU General Public License for more details.
    |
    | You should have received a copy of the GNU General Public License
    | along with this program.  If not, see <http://www.gnu.org/licenses/>.
    " | cut -d "|" -f 2 >&2
}

# Display warranty information (Also important).
_show_warranty(){
    echo "
    |    THERE IS NO WARRANTY FOR THIS PROGRAM, TO THE EXTENT PERMITTED BY
    | APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
    | HOLDERS AND/OR OTHER PARTIES PROVIDE THIS PROGRAM "AS IS" WITHOUT WARRANTY
    | OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, 
    | THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    | PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THIS PROGRAM
    | IS WITH YOU.  SHOULD THIS PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
    | ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
    " | cut -d "|" -f 2 >&2
}

# Uix
_warning(){ [ $QUIET = 0 ] && echo -n -e "${color}[WARNING]${reset} -- ${*}"; }
_exit(){ [ $QUIET = 0 ] && echo -e "${color}[FATAL]${reset} -- ${*}" && exit $EX; }

# Show manual page.
# (As long as this program was installed correctly)
_read_man(){
    [[ ! /usr/share/man1/shh.1.gz ]] && { ex=1; _exit "man page not found"; } # advice?
    man 1 shh
}

# Remove all working files/directories
_remove(){
    local line0 line1 tmpf
    tmpf=$(mktemp -p /tmp "shh.XXXXXXXXXXXXXX")
    ret=$?
    
    while read -r line0; do
        echo $line0 | cut -d " " -f 2 >> $tmpf #|| ex=1; _exit "failed to fill tempfile from .index"
    done < ./.parents/curr/.index

    while read -r line1; do
        rm -rv $line1 || ex=1; _exit "failed to remove working files."
    done < $tmpf
    rm -rv $INIT $tmpf
}

# ! - init directory
# This will setup a hidden dir, set all parents inside,
# make all children, then nest them inside of the parents.
_setup_init(){
    # Do random things to end this function.
    _other(){
        INDEX=$INIT/${PARENT[0]}/${PARENT[2]}
        VARIABLES=$INIT/${PARENT[0]}/${CHILD[0]}
        FUNCTIONS=$INIT/${PARENT[0]}/${CHILD[1]}
        EXECUTIVE=$executive
        
        _get_index(){ grep -n $x $INDEX | cut -d " " -f 3; }
        
        readonly EXECUTIVE=$(x=$EXECUTIVE;_get_index)
        readonly FUNCTIONS=$(x=$FUNCTIONS;_get_index)
        readonly VARIABLES=$(x=$VARIABLES;_get_index)
        [[ $? -eq 0 ]] || echo $?

        # Start filling stuff in ..
        echo "readonly VERSION=1.0" > $VARIABLES echo $? #|| ex=1; _exit "failed to setup $VARIABLES"
        echo -e "#!/bin/bash\nsource $VARIABLES\nsource $FUNCTIONS\n" >> $EXECUTIVE echo $? #|| ex=1; _exit "failed to setup $FUNCTIONS"
    }

    _make_init_dir(){
        # Any additional argument is considered a name for the executive
        if [[ $1 ]]
        then
            case "$1" in
                *)  executive="./${1}" || echo $? ;;
            esac
        else
            # Get a name for the executive
            local name
            echo -e -n "${color}[NAME]: ${reset}"
            while read name; do case $name in
                *) executive="./${name}" || echo $?; break ;;
            esac done
        fi

        # Make and index all.
        declare -A all
        if mkdir -p $INIT/{${PARENT[0]},${PARENT[1]}}
        then
            if a=$INIT/${PARENT[0]}/${PARENT[2]}; touch $a
            then
                if b=$executive; touch $b; md5sum $b >> $a
                then
                    if c=$INIT/${PARENT[0]}/${CHILD[0]}; touch $c; md5sum $c >> $a
                    then
                        if d=$INIT/${PARENT[0]}/${CHILD[1]}; touch $d; md5sum $d >> $a
                        then
                            _other
                        fi
                    fi
                fi
            fi
        fi
    }
   
    # Check if Parents exist,
    # if so, return a non zero value, and prompt the user (if not in '--silent' mode).
    _has_init_dir(){
        # Confirmation needed to remove parents.
        _confirm(){
            local ans0
            echo -e -n "[CONFIRM] ${color}[y/n]${reset}: "
            while read ans0; do case "$ans0" in
                n|N|no|NO) return 1 ;;
                y|Y|yes|YES) _remove && _make_init_dir && return 0 || return 1 ;;
                *) return 1 ;;
            esac done
        }
        
        local ans1
        echo -e -n "You apperar to already be in a working directoy, ${color}overwrite? [y/n]:${reset} "
        while read ans1; do case "$ans1" in
            n|N|no|NO) echo $? ; break ;;
            y|Y|yes|YES) _confirm || echo $? ; break ;;
            *) echo "$?" ; break ;;
        esac done
    }

    [[ ! -d $INIT ]] && _make_init_dir && return 0
    [[ -d $INIT ]] && _has_init_dir && return 0
    return 1
}

# Show variable information
_list_vars(){
	[[ ! -f ./.parents/curr/vars ]] && { ex=1; _exit "no variables to list"; }
    echo -e "${color}VARIABLES:${reset}"
    while read -r line; do 
        case $line in
            ''|\#*) continue ;;
		esac
	    echo "$(echo -e ${color} $(echo $line | cut -d "=" -f 1 | cut -d " " -f 2 ) ${reset})$(echo $line | cut -d "=" -f 2 | sed 's/#.*//')"
	done < ./.parents/curr/vars
}

# Show functions' "order of opertations"
_list_functions(){
    [[ ! -f ./.parents/curr/functions ]] && { ex=1; _exit "no functions to list"; }
    echo -e "${color}FUNCTIONS:${reset}" && \
        while read line; do 
            echo -e " ${color}(${n})${reset}\t$(echo $line | cut -d ' ' -f 2)";
			n=$(($n + 1))
		done < ./.parents/curr/functions | sed '1 d' | sed '$ d'
}

# ! - Create new function
_add_function(){
    :
    # index
    # Handle index
}

# "Compile"
# Checks to see if "native" files still exsist, if so, merge all files together, then clean up the place.
_compile(){
    # Native files merged
    _vars(){
        local tmpvars
        tmpvars=$(mktemp -p /tmp "shh.XXXXXXXXXXXXXX")
        cat ${executive} | head -n 1 > $tmpvars && cat vars >> $tmpvars
        [[ $? -ne 0 ]] && ex=1; _exit "vars not cooperating"
    }

    _functions(){
        local tmpfuncs
        tmpfuncs=$(mktemp -p /tmp "shh.XXXXXXXXXXXXXX")
        while read line; do 
            echo $line | cut -d " " -f 2 | sed 's/#.*//g'
        done < ./functions | sed '1d;$d' > $tmpfuncs
    	[[ $? -ne 0 ]] && ex=1; _exit "functions not cooperating"
    }

    # Special files handled
    _special(){
        local found man
    	for found in ${all_files[@]}; do case "$found" in
            "$rawman") rm "$rawman" || ex=1; _exit "man page immovable" ;;
            _*) rm ./_* ;;
        esac done
    }

    # Finish him
    _sweep(){
        # Functions
        { cat $tmpfuncs >> $tmpvars && rm $tmpfuncs $tmpvars; } || { ex=1; _exit "could not sweep functions"; }
		# Executive
        { sed -i '1,4 d' $executive && cat $executive >> $tmpvars; } && { rm "${executive}"; } || { ex=1; _exit "unable to sweep executive"; }
        { mv $tmpvars $executive && chmod +x $executive && rm vars functions; } || { ex=1; _exit "unable to sweep vars"; }
        [[ $? -ne 0 ]] && { ex=1; _exit "unable to '_sweep'"; }
        _special
    }

    local n_file all_files
    all_files=( $(ls .) )
	for n_file in ${all_files[@]}
	do case "$n_file" in
        vars) _vars ;;
		functions) _functions ;;
	esac done
	[[ $? -ne 0 ]] && { ex=1; _exit "Compilation failure"; } # exit-code "system" needed
    _sweep
}

# Options
PROGRAM="${0##*/}"
COMMAND="$1"
QUIET=0
CLEAN=0
# ? DEBUG=0

# Editor 
if [[ -n $EDITOR ]]; then
    EDITOR=$EDITOR
elif [[ -x usr/usr/bin/vim ]]; then
    EDITOR=vim
elif [[ -x /usr/bin/nano ]]; then
    EDITOR=nano
elif [[ -x /usr/bin/vi ]]; then
    EDITOR=vi
else
    ex=1; _exit "a standard text editor could not be found"
fi

[[ $# -eq 0 ]] && {  _usage; }

short_opts="s:chvlw"
long_opts="silent,clean,help,version,licence,warranty,init::,del,lf,lv,merge"
opts=$(getopt -o $short_opts -l $long_opts -n "$PROGRAM $COMMAND" -- "$@")
ret=$?

eval set -- "$opts"

while :
do
    case "$1" in
        -s|--silent) QUIET=1; shift 2 ; break ;;
        -h) _usage; break ;;
        --help) _read_man; break ;;
        -v) echo "$VERSION"; break ;;
        --clean) CLEAN=1 ;;
        # ? --debug) DEBUG=1 ;;#f='-v' ;;
        --licence) _show_licence; break ;;
        --warranty) _show_warranty; break ;;
        --version) _version; break ;;
        --) shift; break ;;
        *) ex=1; _exit "${PROGRAM}: Invalid command: $@" ;;
    esac
done
    
case "$COMMAND" in
    init) _setup_init "$2" ;;
    del) _remove ;;
    lf) _list_functions ;;
    lv) _list_vars ;;
    merge) _compile ;;
    # ! nf) _new_function ;;
    # ! nv) _new_var ;;
    # ! ef) _edit_function ;;
    # ! ev) _edit_var ;;
    # ! df) _del_function ;;
    # ! dv) _del_var ;;
    # ! da) _del_all ;;
esac

exit $?

