#!/bin/bash
#
# shh - The shell program helper
#
#   Copyright (C) 2018 awol <awol@member.fsf.org>
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This program is still in development, as such
# any comment beginning with '?' represents possible implimentations, 
# any comment beginning with '!' represents implimentations which will take place, or are currently underway,
# (meaning they might be "broken" at the moment).

readonly VERSION=1.0
readonly color='\e[32m'
readonly reset='\e[0m'

# ! - All non zero return values are currently at set to 1, and since many things are happening,
# and the use of silent mode is an option, return values should offer more information.
# HEY, THIS NEEDS DONE ASSHOLE!!!
# Exit codes 
# EX_USAGE=1
# etc...

_version(){
    echo -e "$(basename $0) - The shell program helper utility - version $VERSION" >&2
}
_usage(){
    _version
    echo "
    |USAGE:
    |   ${PROGRAM} [OPTIONS]... [COMMAND]
    |
    |OPTIONS:
    |   -h, --help     show usage information
    |   -s, --silent   supress stdout and stderr
    |   -v, --version  show version information
    |   --clean        verifys clean working dir
    |   --licence      show copyright information
    |   --warranty     show warranty information
    |
    |COMMAND:
    |   init   setup a new working directory
    |   del    delete all working files in directory
    |   lf     list all functions in working dir
    |   lv     list all variables in working dir
    |   merge  "compile" all working files together
    |   
    |MANUAL: shh(1)\
    " | cut -d "|" -f 2 >&2
    return 0
}

# Just in case, the licence information is also kept in a function.
# Deletion of the licensing information at the head of this file is okay,
# as it is only ABOUT this program (a comment). However, please leave this one alone, 
# as it is a part of this program, and is important information the user should be able to access.
# (unless you are to modify/re-distribute this program under a new copyleft, in which case,
#  a new name and information should be added).
_show_licence(){
    echo "
    | Copyright (C) 2018 awol <awol@member.fsf.org>
    |
    | This program is free software: you can redistribute it and/or modify
    | it under the terms of the GNU General Public License as published by
    | the Free Software Foundation, either version 3 of the License, or
    | (at your option) any later version.
    |
    | This program is distributed in the hope that it will be useful,
    | but WITHOUT ANY WARRANTY; without even the implied warranty of
    | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    | GNU General Public License for more details.
    |
    | You should have received a copy of the GNU General Public License
    | along with this program.  If not, see <http://www.gnu.org/licenses/>.
    " | cut -d "|" -f 2 >&2
}

# Display warranty information (Also important).
_show_warranty(){
    echo "
    |    THERE IS NO WARRANTY FOR THIS PROGRAM, TO THE EXTENT PERMITTED BY
    | APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
    | HOLDERS AND/OR OTHER PARTIES PROVIDE THIS PROGRAM "AS IS" WITHOUT WARRANTY
    | OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, 
    | THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    | PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THIS PROGRAM
    | IS WITH YOU.  SHOULD THIS PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
    | ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
    " | cut -d "|" -f 2 >&2
}

# Uix
_warning(){ [ $QUIET = 0 ] && echo -n -e "${color}[WARNING]${reset} -- ${*}"; }
_exit(){ [ $QUIET = 0 ] && echo -e "${color}[FATAL]${reset} -- ${*}" && exit $EX; }

# Show manual page.
# (As long as this program was installed correctly)
_read_man(){
    [[ ! /usr/share/man1/shh.1.gz ]] && { ex=1; _exit "man page not found"; } # advice?
    man 1 shh
}

# Remove all native files
_remove(){
    _remove_all()
	{
        # ! if functions contains valid data
        # ! parents
        local ret=$?
        { while read line; do rm "$(cut -d ' ' -f 2)"; done < ./functions; }
		if [[ $ret = 0 ]]; then 
            rm ./vars ./functions 
            if [[ $? -ne 0 ]]; then 
                ex=1; _exit "failed to remove working files"
            else
                return 0
            fi
        fi
	}
    
    if [ $QUIET = 0 ]; then
        # Confirmation required
		local conf ans
        echo -e -n "CONFIRM ${color}[ y | n ]: ${reset}"
		read conf
        for ans in "${conf}"; do case "$1" in
            n|N) ex=1; _exit "User aborted action" ;;
            y|Y) _remove_all ;;
        esac done 
    fi
	
    _remove_all
    [ $? -ne 0 ] && { ex=1; _exit "failed to remove working files"; }
}

# ! - init directory
_setup_init(){
    init_dir=./.parents
    parent_dirs=${init_dir}/{curr,refs}
    funcs=${init_dir}/curr/functions
    vars=${init_dir}/curr/vars
    ls_init_dir=( $(ls ${init_dir}) )
    local files
    
    if [[ ! ./.parents ]]; then 
        mkdir -p ${parent_dirs}
    else
        ex=1; exit ""
    fi
    
    touch ${funcs} ${vars}
    _index(){ md5sum $x >> ${init_dir}/index && x=$(cut -d " " -f 2); }
    for files in ${ls_init_dir[@]}; do case "$1" in
        "$funcs") x=${funcs}; _index ;;
        "$vars") x=${vars}$; _index ;;
    esac done
}

# Setup a new working directory
_setup(){
    # ! - Check if in a clean working directory
    #[[ $CLEAN = 1 ]] 
    
    # Check if a working setup exists
    # ! - Check if parents exist
    local has
    if [[ -f ./functions && -f ./vars ]]; then
        if [[ $QUIET = 0 ]]; then
            _warning "You already appear to to be in a working directory, overwrite?: "
            while read has; do case "$has" in
                n|N) ex=1; _exit "user aborted action" ;;
                y|Y) _remove; break ;;
                *) ex=1; _exit "user response invalid" ;;
            esac done
        else
            ex=1; _exit ""
        fi
    fi

    # Get EXECUTIVE name
    if [[ $QUIET = 1 ]]; then
        executive=prog
    elif [[ -z $1 ]]; then
        echo -e -n "${color}[NAME]:${reset} "; read executive
    else
        case "$1" in
            *) executive="$1"; shift ;;
        esac
    fi
    
    # Set native files, give an apropriate version number, and open $executive in an editor
    { touch functions vars ${executive}; } && { echo "readonly VERSION=1.0" > ./'vars'; }
    [[ $? -ne 0 ]] && { ex=1; _exit "data error"; }
    { echo -e "#!/bin/bash\nsource vars\nsource functions" > "./${executive}" && chmod +x "./${executive}"; }
    [[ $? -eq 0 ]] && ${EDITOR} ${executive}
}

# Show variable information
_list_vars(){
	[[ ! -f ./'vars' ]] && { ex=1; _exit "no variables to list"; }
    echo -e "${color}VARIABLES:${reset}"
    while read -r line; do 
        case $line in
            ''|\#*) continue ;;
		esac
	    echo "$(echo -e ${color} $(echo $line | cut -d "=" -f 1 | cut -d " " -f 2 ) ${reset})$(echo $line | cut -d "=" -f 2 | sed 's/#.*//')"
	done < ./'vars'
}

# Show functions' "order of opertations"
_list_functions(){
    [[ ! -f ./'functions' ]] && { ex=1; _exit "no functions to list"; }
    echo -e "${color}FUNCTIONS:${reset}" && \
        while read -r line; do 
            echo -e " ${color}(${n})${reset}\t$(echo $line | cut -d ' ' -f 2)";
			n=$(($n + 1))
		done < ./'functions' | sed '1 d' | sed '$ d'
}

# ! - Create new function
_new_function(){
    # index
    if [[ $1 == "-i" || "--index" && $2 ]]; then
        function_index=$2
    fi
    
    # Handle index
    case "${function_index}" in
        *) : ;;
    esac
}

# Native files merged
_vars(){
    # Start if 'vars' exists
    { cat $executive | head -n 1 > .vars && cat vars >> .vars; } || ex=1, _exit "'.vars' not cooperating"
}

_functions(){
    while read line
	do
        cat $(cut -d " " -f 2) > .funcs
	done < functions
	[ $? -ne 0 ] && ex=1; _exit "'.funcs' not cooperating"
}

# Special files handled
_special(){
    local found man
	for found in ${all_files[@]}
	do case "$found" in
        "$rawman") rm "$rawman" || ex=1; _exit "man page immovable" ;;
        _*) rm ./_* ;;
    esac done
}

# Finish him
_sweep(){
    # Functions
    { cat .funcs >> .vars && rm .funcs functions; } || { ex=1; _exit "could not sweep functions"; }
		
    # Executive
    { sed -i '1,4 d' $executive && cat $executive >> .vars; } && { rm "${executive}"; } || { ex=1; _exit "unable to sweep executive"; }
    { mv .vars $executive && chmod +x $executive && rm vars; } || { ex=1; _exit "unable to sweep vars"; }
	
    [ $? -ne 0 ] && { ex=1; _exit "unable to '_sweep'"; }
    _special
}

# "Compile"
# Checks to see if "native" files still exsist, if so, merge all files together, then clean up the place.
_compile(){
    all_files=( $(ls .) )
	for n_file in ${all_files[@]}
	do case "$n_file" in
        vars) _vars ;;
		functions) _functions ;;
	esac done
	[ $? -ne 0 ] && ex=1; _exit "Compilation failure" # exit-code "system" needed
    _sweep
}

# Options
PROGRAM="${0##*/}"
COMMAND="$1"
QUIET=0
CLEAN=0
# ? DEBUG=0

# Editor 
if [[ -n $EDITOR ]]; then
    EDITOR=$EDITOR
elif [[ -x usr/usr/bin/vim ]]; then
    EDITOR=vim
elif [[ -x /usr/bin/nano ]]; then
    EDITOR=nano
elif [[ -x /usr/bin/vi ]]; then
    EDITOR=vi
else
    ex=1; _exit "a standard text editor could not be found"
fi

short_opts="s:chvlw"
long_opts="silent,clean,help,version,licence,warranty,init::,del.lf.lv.merge"
opts=$(getopt -o $short_opts -l $long_opts -n "$PROGRAM $COMMAND" -- "$@")
ret=$?

eval set -- "$opts"

if [ $# -eq 0 ]; then
    _usage
fi

while :
do
    case "$1" in
        -s|--silent) QUIET=1; shift ;;
        -h) _usage; break ;;
        --help) _read_man; break ;;
        -v) echo "$VERSION"; break ;;
        --clean) CLEAN=1 ;;
        # ? --debug) DEBUG=1 ;;#f='-v' ;;
        --licence) _show_licence; break ;;
        --warranty) _show_warranty; break ;;
        --version) _version; break ;;
        --) shift; break ;;
        init) _setup "$@"; break ;;
        # ! init) _setup_init "$@" ;;
    	del) _remove; break ;;
        lf) _list_functions; break ;;
        lv) _list_vars; break ;;
        merge) _compile; break ;;

        # ! nf) _new_function ;;
        # ! nv) _new_var ;;
        # ! ef) _edit_function ;;
        # ! ev) _edit_var ;;
        # ! df) _del_function ;;
        # ! dv) _del_var ;;
        # ! da) _del_all ;;
        
        *) ex=1; _exit "${PROGRAM}: Invalid command: $@" ;;
    esac
done
exit $?

